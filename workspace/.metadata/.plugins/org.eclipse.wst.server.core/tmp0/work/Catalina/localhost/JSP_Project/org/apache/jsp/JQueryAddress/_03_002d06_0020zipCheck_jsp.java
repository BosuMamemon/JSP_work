/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.36
 * Generated at: 2025-03-06 06:41:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.JQueryAddress;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.address.ZipCode;
import java.util.ArrayList;
import com.address.AddressDAO;

public final class _03_002d06_0020zipCheck_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("com.address.ZipCode");
    _jspx_imports_classes.add("com.address.AddressDAO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>zipCheck</title>\r\n");
      out.write("	</head>\r\n");
      out.write("	\r\n");
      out.write("	<body>\r\n");
      out.write("		<table>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>\r\n");
      out.write("					동이름 입력:\r\n");
      out.write("					<input type=\"text\" id=\"input\" name=\"input\">\r\n");
      out.write("					<button type=\"button\" id=\"send\">검색</button>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("		<div id=\"result\"></div>\r\n");
      out.write("	</body>\r\n");
      out.write("	\r\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\" integrity=\"sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("		$(function() {\r\n");
      out.write("			// 검색버튼 클릭\r\n");
      out.write("			$(\"#send\").click(function() {\r\n");
      out.write("				sendIt();\r\n");
      out.write("			})\r\n");
      out.write("			\r\n");
      out.write("			// 주소 입력하고 엔터\r\n");
      out.write("			$(\"input\").keydown(function(e) {\r\n");
      out.write("				if(e.keyCode==13) {\r\n");
      out.write("					// 엔터 키의 아스키코드가 13임 ㅇㅇ\r\n");
      out.write("					sendIt();\r\n");
      out.write("				}\r\n");
      out.write("			})\r\n");
      out.write("			\r\n");
      out.write("			// .on(연결시킬이벤트, 이벤트가일어나는태그, 콜백함수) = 이벤트랑 태그를 연결시키는 함수\r\n");
      out.write("			$(\"#result\").on(\"click\", \"tr\", function() {\r\n");
      out.write("				// 클릭 이벤트가 일어난 tr(this)태그의 자녀 td 중 1번째\r\n");
      out.write("				let address = \r\n");
      out.write("					$(\"td:eq(1)\", this).text() + \" \" +\r\n");
      out.write("					$(\"td:eq(2)\", this).text() + \" \" +\r\n");
      out.write("					$(\"td:eq(3)\", this).text() + \" \" +\r\n");
      out.write("					$(\"td:eq(4)\", this).text();\r\n");
      out.write("				$(opener.document).find(\"#zipcode\").val($(\"td:eq(0)\", this).text());\r\n");
      out.write("				$(opener.document).find(\"#address\").val(address);\r\n");
      out.write("				self.close();\r\n");
      out.write("			})\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("		let sendIt = function() {\r\n");
      out.write("			if($(\"#input\").val()==\"\") {\r\n");
      out.write("				alert(\"동 이름을 입력하세요.\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			//.getJSON(\"갖고 갈 주소\", \"갖고 갈 데이터(딕셔너리형)\", 콜백함수)이란?\r\n");
      out.write("			// 자바의 자료형을 JSON 형태로 딸깍 한번에 파싱해버리는 함수\r\n");
      out.write("			$.getJSON(\r\n");
      out.write("					\"03-06 zipProcess.jsp\",\r\n");
      out.write("					{\"input\": $(\"input\").val()},\r\n");
      out.write("					function(res) {\r\n");
      out.write("						let str = \"<table>\"\r\n");
      out.write("						// .each(반복을 돌릴 객체, 반복하면서 돌릴 함수) = 제이쿼리에서의 반복문\r\n");
      out.write("						$.each(res, function(key, val) {\r\n");
      out.write("							str += \"<tr>\"\r\n");
      out.write("							str += \"<td>\" + val.zipcode + \"</td>\"\r\n");
      out.write("							str += \"<td>\" + val.sido + \"</td>\"\r\n");
      out.write("							str += \"<td>\" + val.gugun + \"</td>\"\r\n");
      out.write("							str += \"<td>\" + val.dong + \"</td>\"\r\n");
      out.write("							str += \"<td>\" + val.bunji + \"</td>\"\r\n");
      out.write("							str += \"</tr>\"\r\n");
      out.write("						})\r\n");
      out.write("						str += \"</table>\"\r\n");
      out.write("						// #result의 innerHTML에 str을 넣겠다는 의미임\r\n");
      out.write("						$(\"#result\").html(str)\r\n");
      out.write("					}\r\n");
      out.write("			)\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
