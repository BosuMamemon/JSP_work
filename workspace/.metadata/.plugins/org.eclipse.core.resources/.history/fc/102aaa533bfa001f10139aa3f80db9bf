package com.address;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

public class AddressDAO {
	
//	DAO: Data Access Object
	
//	필드
	private String url;
	private String user;
	private String password;
	
	public AddressDAO() {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			this.url = "jdbc:oracle:thin:@localhost:1521:xe";
			this.user = "scott";
			this.password = "tiger";
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
//	메소드
//		데이터 삽입
	public void insert(Address addr) {
		Connection conn = null;
		PreparedStatement ps = null;
		String sql = "INSERT INTO address VALUES(address_seq.NEXTVAL, ?, ?, ?, ?)";
		
		try {
			conn = DriverManager.getConnection(url, user, password);
			ps = conn.prepareStatement(sql);
			
			ps.setString(1, addr.getName());
			ps.setString(2, addr.getZipcode());
			ps.setString(3, addr.getAddress());
			ps.setString(4, addr.getTel());
			
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			this.closeConnection(conn, ps, null, null);
		}
		
	}
	
//		모든 커넥션 닫기
	private void closeConnection(Connection conn, PreparedStatement ps, Statement st, ResultSet rs) {
		try {
			if(conn != null) conn.close();
			if(ps != null) ps.close();
			if(st != null) st.close();
			if(rs != null) rs.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
//		전체보기
	public ArrayList<Address> list() {
		ArrayList<Address> aList = new ArrayList<>(); 
		Connection conn = null;
		Statement st = null;
		ResultSet rs = null;
		String sql = "SELECT * FROM address ORDER BY num";
		
		try {
			conn = DriverManager.getConnection(url, user, password);
			st = conn.createStatement();
			rs = st.executeQuery(sql);
			
			while(rs.next()) {
				Address addr = new Address();
				addr.setNum(rs.getInt("num"));
				addr.setName(rs.getString("name"));
				addr.setZipcode(rs.getString("zipcode"));
				addr.setAddress(rs.getString("address"));
				addr.setTel(rs.getString("tel"));
				
				aList.add(addr);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			this.closeConnection(conn, null, st, rs);
		}
		
		return aList;
	}
	
//		갯수 세기
	public int getCount() {
		int count = 0;
		Connection conn = null;
		Statement st = null;
		ResultSet rs = null;
		String sql = "SELECT COUNT(*) FROM address";
		
		try {
			conn = DriverManager.getConnection(url, user, password);
			st = conn.createStatement();
			rs = st.executeQuery(sql);
			
			if(rs.next()){
				count = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			this.closeConnection(conn, null, st, rs);
		}
		
		return count;
	}
	
//		디테일 불러오기(사실상 전체보기 ㅡㅡ)
	public Address detail(int num) {
		Address addr = null;
		Connection conn = null;
		Statement st = null;
		ResultSet rs = null;
		String sql = "SELECT * FROM address WHERE num =" + num;
		
		try {
			conn = DriverManager.getConnection(url, user, password);
			st = conn.createStatement();
			rs = st.executeQuery(sql);
			
			if(rs.next()) {
				addr = new Address();
				addr.setNum(rs.getInt("num"));
				addr.setName(rs.getString("name"));
				addr.setZipcode(rs.getString("zipcode"));
				addr.setAddress(rs.getString("address"));
				addr.setTel(rs.getString("tel"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			this.closeConnection(conn, null, st, rs);
		}
		
		return addr;
	}
	
//		삭제하기
	public void delete(int num) {
		Connection conn = null;
		Statement st = null;
		String sql = "DELETE FROM address WHERE num =" + num;
		
		try {
			conn = DriverManager.getConnection(url, user, password);
			st = conn.createStatement();
			int delCount = st.executeUpdate(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			this.closeConnection(conn, null, st, null);
		}
	}
	
//		수정하기
	public void update(Address addr) {
		Connection conn = null;
		PreparedStatement ps = null;
		String sql = "UPDATE address SET name = ?, zipcode = ?, address = ?, tel = ? WHERE num = ?";
		
		try {
			conn = DriverManager.getConnection(url, user, password);
			ps = conn.prepareStatement(sql);
			
			ps.setString(1, addr.getName());
			ps.setString(2, addr.getZipcode());
			ps.setString(3, addr.getAddress());
			ps.setString(4, addr.getTel());
			ps.setInt(5, addr.getNum());
			
			int updateCount = ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			this.closeConnection(conn, ps, ps, null);
		}
	}
	
//		우편번호 검색
	public ArrayList<ZipCode> zipCodeRead(String input) {
		ArrayList<ZipCode> zipCodes = new ArrayList<>();
		Connection conn = null;
		Statement st = null;
		ResultSet rs = null;
		
		try {
			String sql = "SELECT * FROM zipcode WHERE dong LIKE '%" + input + "%'";
			conn = DriverManager.getConnection(url, user, password);
			st = conn.createStatement();
			rs = st.executeQuery(sql);
			
			while(rs.next()) {
				ZipCode zc = new ZipCode(
							rs.getString("zipcode"),
							rs.getString("sido"),
							rs.getString("gugun"),
							rs.getString("dong"),
							rs.getString("bunji"),
							rs.getInt("seq")
						);
				zipCodes.add(zc);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			this.closeConnection(conn, null, st, rs);
		}
		
		return zipCodes;
	}
	
//		전체보기(검색 포함 ㄷㄷ)
	public ArrayList<Address> list(String field, String word) {
		Connection conn = null;
		Statement st = null;
		ResultSet rs = null;
		ArrayList<Address> aList = new ArrayList<>();
		String sql = ""; 
		
		try {
			conn = DriverManager.getConnection(url, user, password);
			st = conn.createStatement();
			
			if(word.equals("") ) {
				sql = "SELECT * FROM address ORDER BY num";	
			} else {
				sql = "SELECT * FROM address WHERE " + field + " LIKE '%" + word + "%' ORDER BY num";
			}
			
			rs = st.executeQuery(sql);
			
			while(rs.next()) {
				Address addr = new Address(
						rs.getInt("num"),
						rs.getString("name"),
						rs.getString("zipcode"),
						rs.getString("address"),
						rs.getString("tel")
					);
				aList.add(addr);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			this.closeConnection(conn, null, st, rs);
		}
		
		return aList;
	}
	
//		갯수 세기(검색 포함)
	public int getCount(String field, String word) {
		Connection conn = null;
		Statement st = null;
		ResultSet rs = null;
		String sql = ""; 
		
		try {
			conn = DriverManager.getConnection(url, user, password);
			st = conn.createStatement();
			
			if(word.equals("") ) {
				sql = "SELECT COUNT(*) FROM address WHERE name LIKE '%%'";	
			} else {
				sql = "SELECT * FROM address WHERE " + field + " LIKE '%" + word + "%' ORDER BY num";
			}
			
			rs = st.executeQuery(sql);
			
			while(rs.next()) {
				Address addr = new Address(
						rs.getInt("num"),
						rs.getString("name"),
						rs.getString("zipcode"),
						rs.getString("address"),
						rs.getString("tel")
					);
				aList.add(addr);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			this.closeConnection(conn, null, st, rs);
		}
		
		return 0;
	}

}
